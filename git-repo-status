#!/usr/bin/env bash

# TODO: use dollar sign in front of these to interpret the escape sequences
# (instead of using `echo -e` everywhere?)
COLOR_FG_BOLD_BLUE='\033[1;34m'
COLOR_FG_RED='\033[0;31m'
COLOR_FG_GREEN='\033[0;32m'
COLOR_FG_BOLD_BLACK='\033[1;30m'
COLOR_FG_BOLD_BLACK='\033[1;30m'
COLOR_FG_208='\033[38;5;208m' # orange

# git colors
GS_COLOR_BRANCH="$COLOR_FG_BOLD_BLUE"
GS_COLOR_REVIEWID="$COLOR_FG_BOLD_BLUE"
GS_COLOR_NO_REMOTE="$COLOR_FG_BOLD_BLUE"
GS_COLOR_TAG="$COLOR_FG_BOLD_BLUE"
GS_COLOR_HASH="$COLOR_FG_BOLD_BLUE"
GS_COLOR_NEED_PUSH="$COLOR_FG_BOLD_BLUE"
GS_COLOR_NEED_PULL="$COLOR_FG_BOLD_BLUE"
GS_COLOR_FORK_AHEAD="$COLOR_FG_BOLD_BLUE"
GS_COLOR_FORK_BEHIND="$COLOR_FG_BOLD_BLUE"
GS_COLOR_REMOTE_OK="$COLOR_FG_BOLD_BLUE"
GS_COLOR_NEED_PUSH_UNTRACKED="$COLOR_FG_BOLD_BLUE"
GS_COLOR_CONFLICT="$COLOR_FG_RED"
GS_COLOR_REBASE="$COLOR_FG_RED"
GS_COLOR_MERGE="$COLOR_FG_RED"
GS_COLOR_BISECT="$COLOR_FG_RED"
GS_COLOR_REVERT="$COLOR_FG_RED"
GS_COLOR_STAGED="$COLOR_FG_GREEN"
GS_COLOR_LOCAL_OK="$COLOR_FG_GREEN"
GS_COLOR_UNTRACKED="$COLOR_FG_BOLD_BLACK"
GS_COLOR_STASHED="$COLOR_FG_BOLD_MAGENTA"
GS_COLOR_BACKUP_REF="$COLOR_FG_208"
GS_COLOR_MODIFIED="$COLOR_FG_208"

# git symbols
GS_SYM_TAG='»'
GS_SYM_HASH='#'
GS_SYM_REVIEWBOARD='r'
GS_SYM_NO_REMOTE='-'
GS_SYM_NEED_PUSH='⇧'
GS_SYM_NEED_PULL='⇩'
GS_SYM_NEED_PUSH_UNTRACKED='⇪'
GS_SYM_FORK='Ⴤ'
GS_SYM_REMOTE_OK='✓'
GS_SYM_STAGED='+'
GS_SYM_MODIFIED='*'
GS_SYM_UNTRACKED='?'
GS_SYM_CONFLICT='!'
GS_SYM_STASHED='ᕱ'
GS_SYM_BACKUP_REF='⟲'
GS_SYM_REBASE='ᚢ'
GS_SYM_MERGE='⑃'
GS_SYM_BISECT='⟀'
GS_SYM_REVERT='⎌'
GS_SYM_LOCAL_OK='✓'


# for platform-specific things
platform_is_mac() {
    [ "$(uname)" == "Darwin" ] # OSX
}
platform_is_linux() {
    [ "$(uname)" == "Linux" ] # Linux
}

# set colors
# argument(s)
# $1 - variable to write
# $2 - color esc sequence
# $3 - string to color
gs_color()  {
  if [ -z "$no_color" ]
  then
    # if no_color is not set, then use colors
    printf -v "$1" "$2$3$COLOR_RESET"
  else
    # otherwise don't add colors
    printf -v "$1" "$3"
  fi
}

# asynchronously fetch updates for all remotes
# TODO: does this need to be done every time? what if I only do this every half hour or something?
# (and save the last time in config somewhere?)
gs_remote_update_async() {
  nohup git remote update >/dev/null 2>&1 &
}

# TODO: make this configurable, via an env var
#  - if this is in PS1, it should probably be async for responsiveness
#  - but in tmux status, that doesn't matter and it adds too much delay
# argument(s)
# $1 - git directory
gs_untracked_update_async() {
  local git_dir="$1"
  cmd_string='sleep 1; num_untracked="$(git status --porcelain --untracked-files=normal | grep ^?? | wc -l)"; echo "$num_untracked" > '"$git_dir"'/repo-status-untracked'
  nohup $SHELL -c "$cmd_string" >/dev/null 2>&1 &
}

# TODO: also, I want a way to check for merge conflicts with origin/master
# (from https://stackoverflow.com/a/6283843)
# I am testing this out, and I should be able to do:
#
# first, same as gs_remote_update_async() above:
#   $ git remote update
#   Fetching origin
#
# then:
#   `git merge-base origin/master <current-branch>`
#
# for example:
#   $ git merge-base origin/master volta-acls
#   5749b26a6cf92bd17e60846c23e6d69c88a0a741
#
# (which gives the same result in the other order)
#   $ git merge-base volta-acls origin/master
#   5749b26a6cf92bd17e60846c23e6d69c88a0a741
#
# finally try to merge, in memory (order matters this time!):
#   `git merge-tree <mergebase> origin/master <current-branch>`
#
# like:
#   $ git merge-tree 5749b26a6cf92bd17e60846c23e6d69c88a0a741 origin/master volta-acls
#   (big dump of info)
#
# BUT, that's not super helpful on it's own - need to grep that for conflicts
# which are marked by "+<<<<<<< .our" or "+>>>>>>> .their"
# so:
#   $ git merge-tree 5749b26a6cf92bd17e60846c23e6d69c88a0a741 origin/master volta-acls | grep "<<<<<< .our\|>>>>>> .their"
#   (no output, so this is ok)
#
# TODO: test this when there are merge conflicts, to make sure it behaves as expected

# join elements of an array with " " (space) character
# arguments:
# $1 - return variable name
# $2 - array elements to join
gs_join_by_space() {
    local varname="$1"
    local first_element="$2"
    shift 2 || shift $(($#)) # account for case of empty array (thanks http://stackoverflow.com/a/23673883)
    printf -v "$varname" "%s" "$first_element${@/#/ }"
}

# arguments:
# $1 - return variable name
# $2 - counter
# $3 - color
# $4 - trailing symbol
# NOTE: not thread safe if I parallelize this stuff
rs_format_count() {
    if [ "$2" -gt 0 ]; then
        unset -v colored_string
        gs_color colored_string "$3" "$2"
        printf -v "$1" "$colored_string$4"
    fi
}

# parse the branch info from `git status --porcelain`
# arguments:
# $1 - return variable name
# $2 - output from `git status --porcelain ...`
rs_parse_branch_line() {
    # this seems overcomplicated, maybe just use a regex?
    local IFS=''
    while read -r line; do
        local XY=${line:0:2}
        case "$XY" in
            \#\#)  printf -v "$1" "${line:3}"; break ;;
        esac
    done <<< "$2"
}

# parse the output from `git stash list`
# arguments:
# $1 - return variable name
# $2 - git base dir
rs_git_stash() {
    # only do this if there are stashes
    if [ -e "$2/refs/stash" ]; then
        if platform_is_mac; then
          last_stash_time=$(stat -f "%m" "$2/refs/stash")
        else
          last_stash_time=$(stat --format=%Y "$2/refs/stash")
        fi
        local cached_stash_info=$(git config repoStatus.stashInfo)
        local cached_stash_time=${cached_stash_info%%:*} # string before ':'
        local cached_num_stashes=${cached_stash_info#*:} # string after ':'

        if [ -z "$cached_stash_time" ] || [ -z "$cached_num_stashes" ] || [ "$last_stash_time" -ne "$cached_stash_time" ]; then
            # something has changed, or haven't run before - need to re-calculate
            # this is faster than "git stash list" in my testing:
            local git_stash_list=$(git reflog show stash)
            local git_num_stashed=0
            # there may be a cleaner way to count number of lines in a string var, but this is fine for now
            local IFS=''
            while read -r line; do
                ((git_num_stashed++))
            done <<< "$git_stash_list"
            git config repoStatus.stashInfo "$last_stash_time:$git_num_stashed"
            cached_num_stashes=$git_num_stashed
        fi
        unset -v colored_stash_string
        gs_color colored_stash_string "$GS_COLOR_STASHED" "$cached_num_stashes"
        printf -v "$1" "$colored_stash_string$GS_SYM_STASHED"
    fi
}

# parse the output from `git show-ref original`
# (backup refs created after running filter-branch)
# argument(s):
# $1 - return variable name
# $2 - git base dir
rs_git_backup_refs() {
    # only do this if there are recent backup refs (don't care about .git/packed-refs for now)
    if [ -d "$2/refs/original" ]; then
        local git_show_ref=$(git show-ref original)
        if [ "$git_show_ref" ]; then
            local git_num_orig_refs=0
            # there may be an easier way to do this, but this works for now
            local IFS=''
            while read -r line; do
                if [[ "$line" =~ ^[0-9a-f]+[[:space:]]+refs/original ]]; then
                    ((git_num_orig_refs++))
                fi
            done <<< "$git_show_ref"
            rs_format_count "$1" "$git_num_orig_refs" "$GS_COLOR_BACKUP_REF" "$GS_SYM_BACKUP_REF"
        fi
    fi
}

# figure out if there is a rebase happening
# arguments
# $1 - return variable name
# $2 - git base dir
rs_git_rebase() {
    local git_dir="$2"
    local git_rebase_head=''
    if [ -d "$git_dir/rebase-apply" ] || [ -d "$git_dir/rebase-merge" ]; then
        if [ -f "$git_dir/rebase-apply/head-name" ]; then
            git_rebase_head="$(<"$git_dir/rebase-apply/head-name")"
        elif [ -f "$git_dir/rebase-merge/head-name" ]; then
            git_rebase_head="$(<"$git_dir/rebase-merge/head-name")"
        else
            git_rebase_head="!!"
        fi
        if [[ "$git_rebase_head" =~ .*/([^/]+) ]]; then
            git_rebase_head="${BASH_REMATCH[1]}"
        fi
        unset -v colored_rebase_string
        gs_color colored_rebase_string "$GS_COLOR_REBASE" "$git_rebase_head"
        printf -v "$1" "$GS_SYM_REBASE$colored_rebase_string"
    fi
}

# figure out if there is a merge happening
# arguments
# $1 - return variable name
# $2 - git base directory
rs_git_merge() {
  git_dir="$2"
  if [ -f "$git_dir/MERGE_HEAD" ]; then
    git_merge_head="$(<"$git_dir/MERGE_HEAD")"
    git_merge_branch="$(git branch --no-color --contains "$git_merge_head")"
    git_merge_name=''
    if [ "$git_merge_branch" ]; then
      # remove '*' and leading whitespace from branch name
      git_merge_name="${git_merge_branch/\*/ }"
      git_merge_name="${git_merge_name#"${git_merge_name%%[![:space:]]*}"}"
    else
      git_merge_name="${git_merge_head:0:8}"
    fi
    unset -v colored_merge_string
    gs_color colored_merge_string "$GS_COLOR_MERGE" "$git_merge_name"
    printf -v "$1" "$GS_SYM_MERGE$colored_merge_string"
  fi
}

# figure out if there is a bisect happening
# arguments
# $1 - return variable name
# $2 - git base directory
rs_git_bisect() {
    unset -v "$1"
    local git_dir="$2"
    if [ -f "$git_dir/BISECT_START" ]; then
        local git_bisect_start="$(<"$git_dir/BISECT_START")"
        unset -v colored_bisect_string
        gs_color colored_bisect_string "$GS_COLOR_BISECT" "$git_bisect_start"
        printf -v "$1" "$GS_SYM_BISECT$colored_bisect_string"
    fi
}

# figure out if there is a revert happening
# arguments
# $1 - return variable name
# $2 - git base directory
rs_git_revert() {
  unset -v "$1"
  local git_dir="$2"
  if [ -f "$git_dir/REVERT_HEAD" ]; then
    local git_revert_start="$(<"$git_dir/REVERT_HEAD")"
    unset -v colored_revert_string
    # only use 8 chars of the hash
    gs_color colored_revert_string "$GS_COLOR_REVERT" "${git_revert_start:0:8}"
    printf -v "$1" "$GS_SYM_REVERT$colored_revert_string"
  fi
}

# combine local status into a string
# arguments:
# $1 - return variable name
# $2 - git base directory
# $3 - output of `git status --porcelain ...`
rs_git_local_status() {
    local git_dir="$2"
    local git_num_staged=0
    local git_num_modified=0
    local git_num_conflict=0
    local git_num_untracked="$([ -f $git_dir/repo-status-untracked ] && echo $(< $git_dir/repo-status-untracked))"
    if [ -z "$git_num_untracked" ]
    then
      git_num_untracked="0"
    fi
    local IFS=''
    while read -r line; do
        XY=${line:0:2}
        case "$XY" in
            U?)      ((git_num_conflict++)) ;;  # unmerged
            ?U)      ((git_num_conflict++)) ;;  # unmerged
            DD)      ((git_num_conflict++)) ;;  # unmerged (both deleted)
            AA)      ((git_num_conflict++)) ;;  # unmerged (both added)
            ?[MADT]) ((git_num_modified++)) ;;  # modified/added/deleted/typechange in working tree
            # \?\?)    ((git_num_untracked++)) ;; # untracked in index and working tree
        esac
        case "$XY" in
            [MARCD]?) ((git_num_staged++)) ;; # modified/added/renamed/copied/deleted in index
        esac
    done <<< "$3"

    rs_format_count git_staged "$git_num_staged" "$GS_COLOR_STAGED" "$GS_SYM_STAGED"
    rs_format_count git_modified "$git_num_modified" "$GS_COLOR_MODIFIED" "$GS_SYM_MODIFIED"
    rs_format_count git_untracked "$git_num_untracked" "$GS_COLOR_UNTRACKED" "$GS_SYM_UNTRACKED"
    rs_format_count git_conflict "$git_num_conflict" "$GS_COLOR_CONFLICT" "$GS_SYM_CONFLICT"

    unset -v git_stashed
    rs_git_stash git_stashed "$git_dir"
    rs_git_backup_refs git_backup_refs "$git_dir"
    rs_git_rebase git_rebase "$git_dir"
    rs_git_merge git_merge "$git_dir"
    rs_git_bisect git_bisect "$git_dir"
    rs_git_revert git_revert "$git_dir"

    local git_stat_arr=($git_rebase $git_merge $git_bisect $git_revert $git_conflict $git_backup_refs $git_staged $git_modified $git_stashed $git_untracked)
    gs_join_by_space git_local_status "${git_stat_arr[@]}"
    if [[ ! -z "${git_local_status// }" ]]; then
        printf -v "$1" "$git_local_status"
    else
        gs_color "$1" "$GS_COLOR_LOCAL_OK" "$GS_SYM_LOCAL_OK"
    fi
}

# return local branch/tag/commit and remote branch if it exists
# arguments:
# $1 - return variable name for head
# $2 - return variable name for head (nocolor)
# $3 - return variable name for origin
# $4 - git branch line from `git status --porcelain --branch`, without the leading "## "
rs_git_head_origin() {
    unset -v "$1" "$2" "$3"
    local status_line="$4"
    if [[ "$status_line" =~ No\ commits\ yet\ on\ (.+) ]]; then
        # "No commits yet on master" - initialized empty repo
        # "No commits yet on master...origin/master [gone]" - checked out empty repo
        local git_branch_arr=( ${BASH_REMATCH[1]//.../ } ) # replace '...' with ' '
        unset -v colored_empty_string
        gs_color colored_empty_string "$GS_COLOR_BRANCH" "${git_branch_arr[0]}"
        printf -v "$1" "$colored_empty_string"
        printf -v "$2" "${git_branch_arr[0]}"
        printf -v "$3" "${git_branch_arr[1]}"
    # elif [[ "$status_line" =~ Initial\ commit\ on\ (.+) ]]; then
    #     # "Initial commit on master" - local branch only
    #     # "Initial commit on master...origin/master" - checked out empty repo
    #     unset -v colored_head_string
    #     gs_color colored_head_string "$GS_COLOR_BRANCH" "${BASH_REMATCH[1]%%...*}"
    #     printf -v "$1" "$colored_head_string"
    #     printf -v "$2" "${BASH_REMATCH[1]%%...*}"
    elif [[ "$status_line" =~ no\ branch ]]; then
        # "HEAD (no branch)" - on tag or detached on commit
        local git_tag=$(git describe --exact-match --tags HEAD 2>/dev/null)
        if [ -n "$git_tag" ]; then
            unset -v colored_tag_string
            gs_color colored_tag_string "$GS_COLOR_TAG" "$git_tag"
            printf -v "$1" "$GS_SYM_TAG$colored_tag_string"
        else
            local git_commit_hash=$(git rev-parse --short HEAD)
            unset -v colored_hash_string
            gs_color colored_hash_string "$GS_COLOR_HASH" "$git_commit_hash"
            printf -v "$1" "$GS_SYM_HASH$colored_hash_string"
        fi
    else
        # "master"
        # "master...origin/master [gone]"
        # "master...origin/master [ahead 8]"
        # "master...origin/master [behind 12]"
        # "master...origin/master [ahead 1, behind 7]"
        local git_branch_arr=( ${status_line//.../ } ) # replace '...' with ' '
        unset -v colored_branches_string
        gs_color colored_branches_string "$GS_COLOR_BRANCH" "${git_branch_arr[0]}"
        printf -v "$1" "$colored_branches_string"
        printf -v "$2" "${git_branch_arr[0]}"
        printf -v "$3" "${git_branch_arr[1]}"
    fi
}

# arguments:
# $1 - return variable name
# $2 - local git branch
rs_git_reviewid() {
    unset -v "$1"
    local git_reviewboard_id=$(git config --get branch.$2.reviewid)
    if [ -n "$git_reviewboard_id" ]; then
        unset -v colored_review_string
        gs_color colored_review_string "$GS_COLOR_REVIEWID" "$git_reviewboard_id"
        printf -v "$1" " $GS_SYM_REVIEWBOARD$colored_review_string"
    fi
}

# arguments:
# $1 - return variable name
# $2 - local git branch
# $3 - origin branch that is tracking the local branch (if it exists)
rs_git_remote_status() {
    unset -v "$1"
    local git_head="$2"
    local git_origin="$3"
    local git_upstream="${3/origin/upstream}"
    if [[ -z "$git_origin" ]]; then
        # local branch with no remote tracking
        local git_excludes=''
        local git_remote_branches=$(git branch -r)
        if [ -n "$git_remote_branches" ]; then
            local git_remotes_arr=($git_remote_branches)
            local git_excludes_arr=()
            for r in "${git_remotes_arr[@]}"; do
                if [[ "$r" != "->" ]]; then
                    git_excludes_arr+=("^$r")
                fi
            done
            gs_join_by_space git_excludes "${git_excludes_arr[@]}"
        fi
        # figure out how many commits exist on this branch that are not in the remotes
        local git_local_commits=$(git rev-list --count HEAD ${git_excludes} 2>/dev/null)
        if [ -n "$git_local_commits" ] && [ "$git_local_commits" -gt 0 ]; then
            unset -v colored_string
            gs_color colored_string "$GS_COLOR_NEED_PUSH_UNTRACKED" "$git_local_commits"
            git_remote_status="$colored_string$GS_SYM_NEED_PUSH_UNTRACKED"
        else
            unset -v git_remote_status
            gs_color git_remote_status "$GS_COLOR_NO_REMOTE" "$GS_SYM_NO_REMOTE"
        fi
        printf -v "$1" "$git_remote_status"
    else
        # remote tracking branch
        local git_rev_list_origin=$(git rev-list --count --left-right ${git_head}...${git_origin} 2>/dev/null)
        if [ "$?" -eq 0 ] && [ -n "$git_rev_list_origin" ]; then
            local git_origin_arr=($git_rev_list_origin) # will split into array because it's 2 numbers separated by spaces
            # local git_ahead=$(rs_format_count "${git_origin_arr[0]}" "$GS_COLOR_NEED_PUSH" "$GS_SYM_NEED_PUSH")
            # local git_behind=$(rs_format_count "${git_origin_arr[1]}" "$GS_COLOR_NEED_PULL" "$GS_SYM_NEED_PULL")
            rs_format_count git_ahead "${git_origin_arr[0]}" "$GS_COLOR_NEED_PUSH" "$GS_SYM_NEED_PUSH"
            rs_format_count git_behind "${git_origin_arr[1]}" "$GS_COLOR_NEED_PULL" "$GS_SYM_NEED_PULL"
        fi
        git_rev_list_upstream=$(git rev-list --count --left-right ${git_origin}...${git_upstream} 2>/dev/null)
        if [ "$?" -eq 0 ]; then
            local git_upstream_arr=($git_rev_list_upstream) # will split into array because it's 2 numbers separated by spaces
            # local git_fork_ahead=$(rs_format_count "${git_upstream_arr[0]}" "$GS_COLOR_FORK_AHEAD" "")
            # local git_fork_behind=$(rs_format_count "${git_upstream_arr[1]}" "$GS_COLOR_FORK_BEHIND" "")
            rs_format_count git_fork_ahead "${git_upstream_arr[0]}" "$GS_COLOR_FORK_AHEAD" ""
            rs_format_count git_fork_behind "${git_upstream_arr[1]}" "$GS_COLOR_FORK_BEHIND" ""
            if [ "$git_fork_ahead" ] || [ "$git_fork_behind" ]; then
                local git_fork_status="${git_fork_ahead}$GS_SYM_FORK${git_fork_behind}"
            fi
        fi

        if [ "$git_behind" ] || [ "$git_ahead" ] || [ "$git_fork_status" ]; then
            local git_remote_stat_arr=($git_behind $git_ahead $git_fork_status)
            gs_join_by_space git_remote_status "${git_remote_stat_arr[@]}"
        else
            # all sync-ed up
            unset -v git_remote_status
            gs_color git_remote_status "$GS_COLOR_REMOTE_OK" "$GS_SYM_REMOTE_OK"
        fi
        printf -v "$1" "$git_remote_status"
    fi
}

# show info about what kind of repo we're in
# some code and ideas from:
# - http://zanshin.net/2012/03/09/wordy-nerdy-zsh-prompt/
# - https://github.com/sjl/oh-my-zsh/commit/3d22ee248c6bce357c018a93d31f8d292d2cb4cd
# - https://github.com/magicmonty/bash-git-prompt
repo_status() {
    if [ "$REPO_STATUS_DISABLE" == "1" ]; then
      # TODO: echo nothing, and return an error code instead?
      echo "(repo status disabled)"
      return
    fi
    rs_status=''
    # git
    git_status_porcelain=$(git status --porcelain --untracked-files=no --branch 2>/dev/null)
    if [ "$?" -eq 0 ]; then
        gs_remote_update_async
        git_dir=$(git rev-parse --git-dir)
        gs_untracked_update_async "$git_dir"
        rs_parse_branch_line git_branch_info "$git_status_porcelain"
        rs_git_head_origin git_head git_head_nocolor git_origin "$git_branch_info"
        rs_git_reviewid git_reviewid "$git_head_nocolor"
        rs_git_remote_status git_remote_status "$git_head_nocolor" "$git_origin"
        rs_git_local_status git_local_status "$git_dir" "$git_status_porcelain"
        rs_status+="$git_head$git_reviewid $git_remote_status / $git_local_status"
    fi
    echo -e "$rs_status"
}

#### Actually run the repo_status function if this was called as a script ####

# if this was sourced, return before running the function
# (the script that sourced this can run the function as needed)
return 0 2>/dev/null

# parse command line options
arg="$1"
case "$arg" in
  -n|--no-color)
    shift # shift off the argument
    no_color="true"
    ;;
esac

# optional arg: directory to run this function (default to PWD)
if [ -n "$1" ]
then
  # run the status for the input dir
  # (using a subshell so the `cd` does not have an effect if this is sourced)
  ( cd "$1"; repo_status )
else
  # default to PWD, don't need to `cd`
  repo_status
fi

#################### Debugging & Profiling ####################
# TODO: move these to a separate script that sources this one

# trace the calls that are made to git
debug_repo_status_call_trace() {
    ( set -x; repo_status 2>&1 | grep " git " )
}

# figure out how long the individual functions take to run
debug_repo_status_function_time() {
    somevar="doesn't matter"
    somevar1="doesn't matter"
    somevar2="doesn't matter"
    git_status_porcelain=$(git status --porcelain --untracked-files=normal --branch 2>/dev/null)
    git_dir="$(git rev-parse --git-dir)"
    rs_parse_branch_line git_branch_info "$git_status_porcelain"
    rs_git_head_origin git_head git_head_nocolor git_origin "$git_branch_info"

    # for sed here, only print the "real   0m0.001s" line
    sed_args=( '-n' '/real/ p' )

    # formatting so things line up nicely
    report_format="%-40s %s\n"

    # can refactor this stuff to a loop, but whatever
    printf "$report_format" \
      "repo_status()" \
      "$( ( time repo_status ) 2>&1 | sed "${sed_args[@]}" )"

    printf "$report_format" \
      "git status --porcelain --unormal" \
      "$( ( time git status --porcelain --untracked-files=normal --branch 2>/dev/null) 2>&1 | sed "${sed_args[@]}" )"

    printf "$report_format" \
      "git status --porcelain --uno" \
      "$( ( time git status --porcelain --untracked-files=no --branch 2>/dev/null) 2>&1 | sed "${sed_args[@]}" )"

    printf "$report_format" \
      "rs_parse_branch_line()" \
      "$( ( time rs_parse_branch_line somevar $git_status_porcelain ) 2>&1 | sed "${sed_args[@]}" )"

    printf "$report_format" \
      "rs_git_stash()" \
      "$( ( time rs_git_stash somevar $git_dir ) 2>&1 | sed "${sed_args[@]}" )"

    printf "$report_format" \
      "rs_git_backup_refs()" \
      "$( ( time rs_git_backup_refs somevar $git_dir ) 2>&1 | sed "${sed_args[@]}" )"

    printf "$report_format" \
      "rs_git_rebase()" \
      "$( ( time rs_git_rebase somevar $git_dir ) 2>&1 | sed "${sed_args[@]}" )"

    printf "$report_format" \
      "rs_git_merge()" \
      "$( ( time rs_git_merge somevar $git_dir ) 2>&1 | sed "${sed_args[@]}" )"

    printf "$report_format" \
      "rs_git_bisect()" \
      "$( ( time rs_git_bisect somevar $git_dir ) 2>&1 | sed "${sed_args[@]}" )"

    printf "$report_format" \
      "rs_git_local_status()" \
      "$( ( time rs_git_local_status somevar $git_dir "$git_status_porcelain" ) 2>&1 | sed "${sed_args[@]}" )"

    printf "$report_format" \
      "rs_git_head_origin()" \
      "$( ( time rs_git_head_origin somevar somevar1 somevar2 "$git_branch_info" ) 2>&1 | sed "${sed_args[@]}" )"

    printf "$report_format" \
      "rs_git_reviewid()" \
      "$( ( time rs_git_reviewid somevar "$git_head_nocolor" ) 2>&1 | sed "${sed_args[@]}" )"

    printf "$report_format" \
      "rs_git_remote_status()" \
      "$( ( time rs_git_remote_status somevar "$git_head_nocolor" "$git_origin" ) 2>&1 | sed "${sed_args[@]}" )"
}

#################### For Testing ####################

test_git_local_status() {
    git_status_porcelain=$(git status --porcelain --untracked-files=normal --branch 2>/dev/null)
    git_dir=$(git rev-parse --git-dir)
    # testing the output of this function:
    rs_git_local_status git_local_status "$git_dir" "$git_status_porcelain"
    echo "$git_local_status"
}

test_parse_branch_line() {
    git_status_porcelain=$(git status --porcelain --untracked-files=normal --branch 2>/dev/null)
    # testing the output of this function:
    rs_parse_branch_line git_branch_info "$git_status_porcelain"
    echo "$git_branch_info"
}

test_git_head_origin_head() {
    git_status_porcelain=$(git status --porcelain --untracked-files=normal --branch 2>/dev/null)
    rs_parse_branch_line git_branch_info "$git_status_porcelain"
    # testing the 'git_head' output of this function:
    rs_git_head_origin git_head git_head_nocolor git_origin "$git_branch_info"
    echo "$git_head"
}

test_git_head_origin_head_nocolor() {
    git_status_porcelain=$(git status --porcelain --untracked-files=normal --branch 2>/dev/null)
    rs_parse_branch_line git_branch_info "$git_status_porcelain"
    # testing the 'git_head_nocolor' output of this function:
    rs_git_head_origin git_head git_head_nocolor git_origin "$git_branch_info"
    echo "$git_head_nocolor"
}

test_git_head_origin_origin() {
    git_status_porcelain=$(git status --porcelain --untracked-files=normal --branch 2>/dev/null)
    rs_parse_branch_line git_branch_info "$git_status_porcelain"
    # testing the 'git_origin' output of this function:
    rs_git_head_origin git_head git_head_nocolor git_origin "$git_branch_info"
    echo "$git_origin"
}
